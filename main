from flask import Flask, render_template, request, redirect, url_for, flash, session
import sqlite3

app = Flask(__name__)
app.secret_key = 'zAir_Wreck889JulyPepsiVVIIdbfen'  # Required for session management

# Database connection function
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row  # Allows column access by name
    return conn


# Home route
@app.route('/')
def home():
    if 'username' in session and 'security_level' in session:
        if session['security_level'] > 3:
            return redirect(url_for('not_found'))

        return render_template('home.html', username=session['username'], security_level=session['security_level'])

    flash('Please log in to access this page.')
    return redirect(url_for('login'))


# Login route
@app.route('/login', methods=['GET', 'POST'])
def login():
    error_msg = None

    if request.method == 'POST':
        username = request.form['username']
        login_password = request.form['login_password']

        conn = get_db_connection()
        user = conn.execute('''
            SELECT * FROM GammerAccount
            WHERE name = ? AND login_password = ?
        ''', (username, login_password)).fetchone()
        conn.close()

        if user:
            session['user_id'] = user['id']
            session['username'] = user['name']
            return redirect(url_for('home'))
        else:
            error_msg = "Invalid username or password."

    return render_template('login.html', error_msg=error_msg)


# Add User route
@app.route('/add_user', methods=['GET', 'POST'])
def add_user():
    if request.method == 'POST':
        username = request.form['name']
        age = request.form['age']
        email = request.form['email']
        login_password = request.form['login_password']

        errors = []
        if not all([username, age, email, login_password]):
            errors.append("All fields are required.")
        if not age.isdigit():
            errors.append("Age must be an integer.")

        if errors:
            return render_template('add_user.html', errors=errors, name=username, age=age, email=email, login_password=login_password)

        conn = get_db_connection()
        conn.execute('''
            INSERT INTO GammerAccount (name, age, email, login_password)
            VALUES (?, ?, ?, ?)
        ''', (username, age, email, login_password))  # Default security_level to 1
        conn.commit()
        conn.close()

        flash('User added successfully!')
        return redirect(url_for('home'))

    return render_template('add_user.html')


# List results (for all users)
@app.route('/list_results')
def list_results():
    game_entries = [
        (1, 1, "Minecraft", 1, 2, 4),
        (2, 2, "Fallout", 4, 1, 2),
        (3, 3, "Fortnite", 2, 4, 1),
        (4, 1, "GTA 5", 2, 2, 1),
    ]

    results = [{
        'entry_id': entry[0],
        'user_id': entry[1],
        'name_of_game': entry[2],
        'num_excellent_votes': entry[3],
        'num_ok_votes': entry[4],
        'num_bad_votes': entry[5],
    } for entry in game_entries]

    return render_template('list_results.html', results=results)


# List users (requires security level 2 or higher)
@app.route('/list_users')
def list_users():
    if session.get('security_level', 0) < 2:
        flash("You don't have permission to view this page.")
        return redirect(url_for('home'))

    conn = get_db_connection()
    users = conn.execute('SELECT * FROM GammerAccount').fetchall()
    conn.close()

    return render_template('list_users.html', users=users)


# Add entry route
@app.route('/add_entry', methods=['GET', 'POST'])
def add_entry():
    if request.method == 'POST':
        name_of_game = request.form['name_of_game']
        num_excellent_votes = request.form['num_excellent_votes']
        num_ok_votes = request.form['num_ok_votes']
        num_bad_votes = request.form['num_bad_votes']

        errors = []
        if not name_of_game:
            errors.append("Name of Game is required.")
        if not num_excellent_votes.isdigit():
            errors.append("Excellent votes must be a non-negative integer.")
        if not num_ok_votes.isdigit():
            errors.append("OK votes must be a non-negative integer.")
        if not num_bad_votes.isdigit():
            errors.append("Bad votes must be a non-negative integer.")

        if errors:
            return render_template('add_entry.html', errors=errors,
                                   name_of_game=name_of_game,
                                   num_excellent_votes=num_excellent_votes,
                                   num_ok_votes=num_ok_votes,
                                   num_bad_votes=num_bad_votes)

        user_id = session.get('user_id')
        if not user_id:
            flash('You must be logged in to add an entry.')
            return redirect(url_for('login'))

        try:
            with get_db_connection() as conn:
                conn.execute('''
                    INSERT INTO GameEntry 
                    (name_of_game, num_excellent_votes, num_ok_votes, num_bad_votes, user_id)
                    VALUES (?, ?, ?, ?, ?)
                ''', (name_of_game, num_excellent_votes, num_ok_votes, num_bad_votes, user_id))
                conn.commit()

            flash('Entry added successfully!')
            return redirect(url_for('home'))

        except sqlite3.Error as e:
            flash(f"Database error: {e}")
            return redirect(url_for('home'))

    return render_template('add_entry.html')


# View logged-in user's entries
@app.route('/my_results')
def my_results():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    user_id = session['user_id']

    conn = get_db_connection()
    results = conn.execute('''
        SELECT entry_id, name_of_game, num_excellent_votes, num_ok_votes, num_bad_votes
        FROM GameEntry
        WHERE user_id = ?
    ''', (user_id,)).fetchall()
    conn.close()

    return render_template('my_results.html', results=results)


# Not found route for restricted users
@app.route('/not_found')
def not_found():
    return render_template('not_found.html')


# Logout
@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))


if __name__ == '__main__':
    app.run(debug=True)
